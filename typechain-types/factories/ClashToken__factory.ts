/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ClashToken, ClashTokenInterface } from "../ClashToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016a1380380620016a183398101604081905262000034916200038e565b8151829082906200004d9060039060208501906200023d565b508051620000639060049060208401906200023d565b50506005805460ff1916905550620000846200007e620000ad565b620000b1565b620000a562000092620000ad565b6b1027e72f1f128130880000006200010b565b5050620004f7565b3390565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166200013d5760405162461bcd60e51b81526004016200013490620003f5565b60405180910390fd5b6200014b60008383620001ed565b80600260008282546200015f91906200047f565b90915550506001600160a01b038216600090815260208190526040812080548392906200018e9084906200047f565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620001d390859062000476565b60405180910390a3620001e9600083836200022f565b5050565b620002058383836200022f60201b620006ca1760201c565b6200020f62000234565b156200022f5760405162461bcd60e51b815260040162000134906200042c565b505050565b60055460ff1690565b8280546200024b90620004a4565b90600052602060002090601f0160209004810192826200026f5760008555620002ba565b82601f106200028a57805160ff1916838001178555620002ba565b82800160010185558215620002ba579182015b82811115620002ba5782518255916020019190600101906200029d565b50620002c8929150620002cc565b5090565b5b80821115620002c85760008155600101620002cd565b600082601f830112620002f4578081fd5b81516001600160401b0380821115620003115762000311620004e1565b6040516020601f8401601f1916820181018381118382101715620003395762000339620004e1565b604052838252858401810187101562000350578485fd5b8492505b8383101562000373578583018101518284018201529182019162000354565b838311156200038457848185840101525b5095945050505050565b60008060408385031215620003a1578182fd5b82516001600160401b0380821115620003b8578384fd5b620003c686838701620002e3565b93506020850151915080821115620003dc578283fd5b50620003eb85828601620002e3565b9150509250929050565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6020808252602a908201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686040820152691a5b19481c185d5cd95960b21b606082015260800190565b90815260200190565b600082198211156200049f57634e487b7160e01b81526011600452602481fd5b500190565b600281046001821680620004b957607f821691505b60208210811415620004db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61119a80620005076000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80635c975abb116100ad57806395d89b411161007157806395d89b4114610224578063a457c2d71461022c578063a9059cbb1461023f578063dd62ed3e14610252578063f2fde38b1461026557610121565b80635c975abb146101e457806370a08231146101ec578063715018a6146101ff5780638456cb59146102075780638da5cb5b1461020f57610121565b8063313ce567116100f4578063313ce5671461018c57806339509351146101a15780633f4ba83a146101b457806340c10f19146101be57806342966c68146101d157610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016457806323b872dd14610179575b600080fd5b61012e610278565b60405161013b9190610cc2565b60405180910390f35b610157610152366004610c62565b61030a565b60405161013b9190610cb7565b61016c610327565b60405161013b91906110cd565b610157610187366004610c27565b61032d565b6101946103c6565b60405161013b91906110d6565b6101576101af366004610c62565b6103cb565b6101bc61041f565b005b6101bc6101cc366004610c62565b610468565b6101bc6101df366004610c8b565b6104b5565b6101576104c9565b61016c6101fa366004610bd4565b6104d2565b6101bc6104f1565b6101bc61053a565b610217610581565b60405161013b9190610ca3565b61012e610595565b61015761023a366004610c62565b6105a4565b61015761024d366004610c62565b61061d565b61016c610260366004610bf5565b610631565b6101bc610273366004610bd4565b61065c565b60606003805461028790611113565b80601f01602080910402602001604051908101604052809291908181526020018280546102b390611113565b80156103005780601f106102d557610100808354040283529160200191610300565b820191906000526020600020905b8154815290600101906020018083116102e357829003601f168201915b5050505050905090565b600061031e6103176106cf565b84846106d3565b50600192915050565b60025490565b600061033a848484610787565b6001600160a01b03841660009081526001602052604081208161035b6106cf565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156103a75760405162461bcd60e51b815260040161039e90610ec0565b60405180910390fd5b6103bb856103b36106cf565b8584036106d3565b506001949350505050565b601290565b600061031e6103d86106cf565b8484600160006103e66106cf565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461041a91906110e4565b6106d3565b6104276106cf565b6001600160a01b0316610438610581565b6001600160a01b03161461045e5760405162461bcd60e51b815260040161039e90610f08565b6104666108b1565b565b6104706106cf565b6001600160a01b0316610481610581565b6001600160a01b0316146104a75760405162461bcd60e51b815260040161039e90610f08565b6104b1828261091f565b5050565b6104c66104c06106cf565b826109e7565b50565b60055460ff1690565b6001600160a01b0381166000908152602081905260409020545b919050565b6104f96106cf565b6001600160a01b031661050a610581565b6001600160a01b0316146105305760405162461bcd60e51b815260040161039e90610f08565b6104666000610ad8565b6105426106cf565b6001600160a01b0316610553610581565b6001600160a01b0316146105795760405162461bcd60e51b815260040161039e90610f08565b610466610b32565b60055461010090046001600160a01b031690565b60606004805461028790611113565b600080600160006105b36106cf565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156105ff5760405162461bcd60e51b815260040161039e90611007565b61061361060a6106cf565b858584036106d3565b5060019392505050565b600061031e61062a6106cf565b8484610787565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106646106cf565b6001600160a01b0316610675610581565b6001600160a01b03161461069b5760405162461bcd60e51b815260040161039e90610f08565b6001600160a01b0381166106c15760405162461bcd60e51b815260040161039e90610dc8565b6104c681610ad8565b505050565b3390565b6001600160a01b0383166106f95760405162461bcd60e51b815260040161039e90610fc3565b6001600160a01b03821661071f5760405162461bcd60e51b815260040161039e90610e0e565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061077a9085906110cd565b60405180910390a3505050565b6001600160a01b0383166107ad5760405162461bcd60e51b815260040161039e90610f7e565b6001600160a01b0382166107d35760405162461bcd60e51b815260040161039e90610d15565b6107de838383610b8d565b6001600160a01b038316600090815260208190526040902054818110156108175760405162461bcd60e51b815260040161039e90610e50565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061084e9084906110e4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161089891906110cd565b60405180910390a36108ab8484846106ca565b50505050565b6108b96104c9565b6108d55760405162461bcd60e51b815260040161039e90610d58565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6109086106cf565b6040516109159190610ca3565b60405180910390a1565b6001600160a01b0382166109455760405162461bcd60e51b815260040161039e9061104c565b61095160008383610b8d565b806002600082825461096391906110e4565b90915550506001600160a01b038216600090815260208190526040812080548392906109909084906110e4565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109d39085906110cd565b60405180910390a36104b1600083836106ca565b6001600160a01b038216610a0d5760405162461bcd60e51b815260040161039e90610f3d565b610a1982600083610b8d565b6001600160a01b03821660009081526020819052604090205481811015610a525760405162461bcd60e51b815260040161039e90610d86565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a819084906110fc565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ac49086906110cd565b60405180910390a36106ca836000846106ca565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610b3a6104c9565b15610b575760405162461bcd60e51b815260040161039e90610e96565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586109086106cf565b610b988383836106ca565b610ba06104c9565b156106ca5760405162461bcd60e51b815260040161039e90611083565b80356001600160a01b03811681146104ec57600080fd5b600060208284031215610be5578081fd5b610bee82610bbd565b9392505050565b60008060408385031215610c07578081fd5b610c1083610bbd565b9150610c1e60208401610bbd565b90509250929050565b600080600060608486031215610c3b578081fd5b610c4484610bbd565b9250610c5260208501610bbd565b9150604084013590509250925092565b60008060408385031215610c74578182fd5b610c7d83610bbd565b946020939093013593505050565b600060208284031215610c9c578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610cee57858101830151858201604001528201610cd2565b81811115610cff5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6020808252602a908201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686040820152691a5b19481c185d5cd95960b21b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156110f7576110f761114e565b500190565b60008282101561110e5761110e61114e565b500390565b60028104600182168061112757607f821691505b6020821081141561114857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212202eecd557d687666f362b36a92fff8593fc6b65e43b9b01e5209878fdf452b71664736f6c63430008000033";

type ClashTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClashTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClashToken__factory extends ContractFactory {
  constructor(...args: ClashTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ClashToken";
  }

  deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ClashToken> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<ClashToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  attach(address: string): ClashToken {
    return super.attach(address) as ClashToken;
  }
  connect(signer: Signer): ClashToken__factory {
    return super.connect(signer) as ClashToken__factory;
  }
  static readonly contractName: "ClashToken";
  public readonly contractName: "ClashToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClashTokenInterface {
    return new utils.Interface(_abi) as ClashTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClashToken {
    return new Contract(address, _abi, signerOrProvider) as ClashToken;
  }
}
